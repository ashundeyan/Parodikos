<!DOCTYPE html>
<html>
	<meta charset="UTF-8">
	<title>Project Parodikos</title>
	<pre id="mainText">Yo. Click <input type="button" value="here" onclick="mainMenu();"> to begin.</pre>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
	<script>
		var slash=new move("Slash",function(user, target){
			var targetOldHealth=target[0].health;
			target[0].health-=getStandardDamageCurve(user,target[0],1,0,0);
			var message="";
			if (user==player){
				message+="You";
			}
			else{
				if (user.generic==true){
					message+="The ";
				}
				message+=user.nameSing;
			}
			message+=" slashed";
			if (target[0]==player){
				message+=" you";
			}
			else{
				if (target[0].generic==true){
					message+=" the";
				}
				message+=" "+target[0].nameSing;
			}
			message+=" for "+(targetOldHealth-target[0].health)+" damage!";
			return message;
		});
		var stab=new move("Stab",function(user, target){
			var targetOldHealth=target[0].health;
			target[0].health-=getStandardDamageCurve(user,target[0],1,0,0);
			var message="";
			if (user==player){
				message+="You";
			}
			else{
				if (user.generic==true){
					message+="The";
				}
				message+=" "+user.nameSing;
			}
			message+=" stabbed";
			if (target[0]==player){
				message+=" you";
			}
			else{
				if (target[0].generic==true){
					message+=" the";
				}
				message+=" "+target[0].nameSing;
			}
			message+=" for "+(targetOldHealth-target[0].health)+" damage!";
			return message;
		});
		var bash=new move("Bash",function(user, target){
			var targetOldHealth=target[0].health;
			target[0].health-=getStandardDamageCurve(user,target[0],0,0,1);
			var message="";
			if (user==player){
				message+="You";
			}
			else{
				if (user.generic==true){
					message+="The";
				}
				message+=" "+user.nameSing;
			}
			message+=" bashed";
			if (target[0]==player){
				message+=" you";
			}
			else{
				if (target[0].generic==true){
					message+=" the";
				}
				message+=" "+target[0].nameSing;
			}
			message+=" for "+(targetOldHealth-target[0].health)+" damage!";
			return message;
		});
		var poisonSlash=new move("Poison Slash",function(user, target){
			var targetOldHealth=target[0].health;
			target[0].health-=getStandardDamageCurve(user,target[0],0,0,1);
			var message="";
			if (user==player){
				message+="You";
			}
			else{
				if (user.generic==true){
					message+="The";
				}
				message+=" "+user.nameSing;
			}
			message+=" used Poison Slash on";
			if (target[0]==player){
				message+=" you";
			}
			else{
				if (target[0].generic==true){
					message+=" the";
				}
				message+=" "+target[0].nameSing;
			}
			message+=" for "+(targetOldHealth-target[0].health)+" damage!";
			var i=0;
			var isPoisoned=false;
			for (i=0;i<target[0].statusEffect.length;i++){
				if (target[0].statusEffect[i]==poison){
					isPoisoned=true;
				}
			}
			if (isPoisoned==false && seed%4==0){
				target[0].statusEffect.push(poison=new statusEffect("Poison",3,function(){
					var targetOldHealth=target[0].health;
					target[0].health-=Math.ceil(target[0].maxHealth/32);
					var message="";
					if (target[0]==player){
						message+="You";
					}
					else{
						if (target[0].generic==true){
							message+="The";
						}
						message+=" "+target[0].nameSing;
					}
					message+=" took "+(targetOldHealth-target[0].health)+" damage from the poison!";
					return message;
				}));
				if (target[0]==player){
					message+="<br>You were poisoned!";
				}
				else{
					if (target[0].generic==true){
						message+="<br>The ";
					}
					message+=target[0].nameSing+" was poisoned!";
				}
			}
			return message;
		});
		var bladeCrash=new combo("Blade Crash",[slash,slash,stab],function(user, target){
			var targetOldHealth=target[0].health;
			target[0].health-=getStandardDamageCurve(user,target[0],3,0,0);
			var message="";
			if (user==player){
				message+="You";
			}
			else{
				if (user.generic==true){
					message+="The";
				}
				message+=" "+user.nameSing;
			}
			message+=" used Blade Crash on";
			if (target[0]==player){
				message+=" you";
			}
			else{
				if (target[0].generic==true){
					message+=" the";
				}
				message+=" "+target[0].nameSing;
			}
			message+=" for "+(targetOldHealth-target[0].health)+" damage!";
			return message;
		});
		var betaSword=new weaponPhysical("Beta Sword",slash,stab,bash,[bladeCrash]);
		var betaArmor=new armor("Beta Armor",0,0,0);
		var player=new playerCharacter();
		player.weaponEquipped=betaSword;
		var beta=new enemy("Beta","Betae",true,8,1,1,1,betaArmor,function(){
			if (seed%5<=1){
				return poisonSlash;
			}
			else{
				return slash;
			}
		});
		increment=1;
		function playerCharacter(){
			this.nameSing="";
			this.generic=false;
			this.maxHealth=100;
			this.health=this.maxHealth;
			this.attack=1;
			this.defense=1;
			this.magic=1;
			this.weaponEquipped=0;
			this.armorEquipped=0;
			this.statusEffect=[];
		}
		function enemy(nameSingParam, namePlParam, genericParam, maxHealthParam, attackParam, defenseParam, magicParam, armorEquippedParam, AIParam){
			this.nameSing=nameSingParam;
			this.namePl=namePlParam;
			this.generic=genericParam;
			this.maxHealth=maxHealthParam;
			this.health=this.maxHealth;
			this.attac=attackParam;
			this.defense=defenseParam;
			this.magic=magicParam;
			this.armorEquipped=armorEquippedParam;
			this.statusEffect=[];
			this.AI=AIParam;
		}
		function weaponPhysical(nameSingParam, primaryAttackParam, secondaryAttackParam, tertiaryAttackParam, comboParam){
			this.nameSing=nameSingParam;
			this.primaryAttack=primaryAttackParam;
			this.secondaryAttack=secondaryAttackParam;
			this.tertiaryAttack=tertiaryAttackParam;
			this.combo=comboParam;
		}
		function armor(nameSingParam, slashDefenseParam, punctureDefenseParam, impactDefenseParam){
			this.nameSing=nameSingParam;
			this.slashDefense=slashDefenseParam;
			this.punctureDefense=punctureDefenseParam;
			this.impact=impactDefenseParam;
		}
		function move(nameParam, executeParam){
			this.name=nameParam;
			this.execute=executeParam;
		}
		function combo(nameParam, comboMoveParam, executeParam){
			this.name=nameParam;
			this.comboMove=comboMoveParam;
			this.execute=executeParam;
		}
		function statusEffect(nameParam, durationTotalParam, executeParam){
			this.name=nameParam;
			this.durationTotal=durationTotalParam;
			this.durationRemaining=this.durationTotal;
			this.execute=executeParam;
		}
		function getStandardDamageCurve(user, target, slash, puncture, impact){
			var damage=Math.ceil(slash/4)+Math.ceil(puncture/4)+Math.ceil(impact/4);
			if ((1/8)*(2*Math.pow((user.attack+slash)-(target.defense+target.armorEquipped.slashDefense),2)+Math.pow(-1,(user.attack+slash)-(target.defense+target.armorEquipped.slashDefense))+7)>0){
				damage+=Math.ceil((1/8)*(2*Math.pow((user.attack+slash)-(target.defense+target.armorEquipped.slashDefense),2)+Math.pow(-1,(user.attack+slash)-(target.defense+target.armorEquipped.slashDefense))+7));
			}
			if ((1/8)*(2*Math.pow((user.attack+puncture)-(target.defense+target.armorEquipped.punctureDefense),2)+Math.pow(-1,(user.attack+puncture)-(target.defense+target.armorEquipped.punctureDefense))+7)>0){
				damage+=Math.ceil((1/8)*(2*Math.pow((user.attack+puncture)-(target.defense+target.armorEquipped.punctureDefense),2)+Math.pow(-1,(user.attack+puncture)-(target.defense+target.armorEquipped.punctureDefense))+7));
			}
			if ((1/8)*(2*Math.pow((user.attack+impact)-(target.defense+target.armorEquipped.impactDefense),2)+Math.pow(-1,(user.attack+impact)-(target.defense+target.armorEquipped.impactDefense))+7)>0){
				damage+=Math.ceil((1/8)*(2*Math.pow((user.attack+impact)-(target.defense+target.armorEquipped.impactDefense),2)+Math.pow(-1,(user.attack+impact)-(target.defense+target.armorEquipped.impactDefense))+7));
			}
			return damage;
		}
		function mainMenu(){
			$("#mainText").html("<input type='button' value='New Game' onclick='setName();'><br><br><input type='button' value='Load Game' onclick='loadGame();'>");
		}
		function setName(){
			$("#mainText").html("What is your name?<br><input id='nameInput' type='text' autofocus><input type='button' value='Submit' onclick='difficulty();'>");
		}
		function difficulty(){
			player.nameSing=$("#nameInput").val();
			seed=parseInt(player.nameSing,36)
			if (player.nameSing=="" || isNaN(seed)){
				return;
			}
			$("#mainText").html("What difficulty do you want to play on?<br>(This cannot be changed once set.)<br><br><input type='button' value='Normal' onclick='battle([var beta0=$.extend(true,{},beta),var beta1=$.extend(true,{},beta)])'>");
		}
		function battle(enemy){
			turnCount=1;
			playerTurnLog=[];
			enemyTurnLog=[];
			var i=0;
			for (i=0;i<enemy.length;i++){
				enemy.health=enemy.maxHealth;
				enemyTurnLog[i]=[];
			}
			battleDisplay(enemy,"");
		}
		function battleDisplay(enemy, battleText){
			var isAttackMenuExpanded=false;
			var i=0;
			var j=0;
			$("#mainText").html("<div id='enemyDisplay' class='left'>");
			for (i=0;i<enemy.length;i++){
				$("#enemyDisplay").append("<div id='enemy"+i+"' class='left'></div>");
				$("#enemy"+i).append("/----------------\\<br>|");
				for (j=0;j<8-Math.ceil(enemy[i].nameSing.length/2);j++){
					$("#enemy"+i).append(" ");
				}
				$("#enemy"+i).append(enemy[i].nameSing);
				for (j=0;j<8-Math.floor(enemy[i].nameSing.length/2);j++){
					$("#enemy"+i).append(" ");
				}
				$("#enemy"+i).append("|<br>| <b>HP</b>[");
				for (j=0;j<10;j++){
					if (Math.ceil(10*enemy[i].health/enemy[i].maxHealth)>j){
						$("#enemy"+i).append("/");
					}
					else{
						$("#enemy"+i).append(" ");
					}
				}
				$("#enemy"+i).append("] |<br>|    \\<b>"+enemy[i].health+"/"+enemy[i].maxHealth+"</b>/");
				for (j=9;j>enemy[i].health.toString().length+enemy[i].maxHealth.toString().length;j--){
					$("#enemy"+i).append(" ");
				}
				$("#enemy"+i).append("|<br>\\----------------/");
			}
			$("#mainText").append("<br><br><br><br><br><br><br><div id='player'></div>");
			$("#player").append("<br><br>"+player.nameSing+" <b>HP</b> "+player.health);
			$("#mainText").append("<br><div id='message'>"+battleText+"</div>");
			$("#mainText").append("<div id='attackMenu'><br><input id='attackInput' type='button' value='Attack'></div>");
			$("#attackInput").click(function expandAttackMenu(){
				if (isAttackMenuExpanded==false){
					$("#attackMenu").append("<br>|--<input id='primaryAttackInput' type='button' value="+player.weaponEquipped.primaryAttack.name+"><br>|--<input id='secondaryAttackInput' type='button' value="+player.weaponEquipped.secondaryAttack.name+"><br>|--<input id='tertiaryAttackInput' type='button' value="+player.weaponEquipped.tertiaryAttack.name+">");
					$("#primaryAttackInput").click(function(){seed+=incrementSeed(0);selectTarget(player,enemy,player.weaponEquipped.primaryAttack);});
					$("#secondaryAttackInput").click(function(){seed+=incrementSeed(1);selectTarget(player,enemy,player.weaponEquipped.secondaryAttack);});
					$("#tertiaryAttackInput").click(function(){seed+=incrementSeed(2);selectTarget(player,enemy,player.weaponEquipped.tertiaryAttack);});
					isAttackMenuExpanded=true;
				}
				else{
					$("#attackMenu").html("<br><input id='attackInput' type='button' value='Attack'>");
					$("#attackInput").click(function(){expandAttackMenu();});
					isAttackMenuExpanded=false;
				}
			});
		}
		function selectTarget(player, enemy, playerMove){
			$("#message").html("Select a target.");
			$("#attackMenu").html("<input type='button' value='testing'>");
			var i=0;
			for (i=0;i<enemy.length;i++){
				$("#enemy"+i).append("<br><input id='targetSelect"+i+"' type='button' value='Target'>");
				$("#targetSelect"+i).click(function(arg){return function(){battleTurn(player,enemy,playerMove,arg);};}([enemy[i]]));
			}
		}
		function battleTurn(player, enemy, playerMove, target){
			var enemyMove=[];
			var i=0;
			var j=0;
			playerTurnLog[turnCount]=playerMove;
			for (i=0;i<enemy.length;i++){
				enemyMove[i]=enemy[i].AI();
				enemyTurnLog[i][turnCount]=enemyMove[i];
			}
			for (i=0;i<player.weaponEquipped.combo.length;i++){
				if (turnCount>=player.weaponEquipped.combo[i].comboMove.length){
					var isCombo=true;
					for (j=0;j<player.weaponEquipped.combo[i].comboMove.length;j++){
						if (!(player.weaponEquipped.combo[i].comboMove[j]==playerTurnLog[turnCount-player.weaponEquipped.combo[i].comboMove.length+j+1])){
							isCombo=false;
						}
					}
					if (isCombo==true){
						playerMove=player.weaponEquipped.combo[i];
						playerTurnLog[turnCount]=playerMove;
					}
				}
			}
			var message="";
			alert(target);
			message+=playerMove.execute(player,target);
			for (i=0;i<player.statusEffect.length;i++){
				message+="<br>"+player.statusEffect[i].execute();
				player.statusEffect[i].durationRemaining--;
				if (player.statusEffect[i].durationRemaining<=0){
					player.statusEffect.splice(i,1);
				}
			}
			for (i=0;i<enemy.length;i++){
				message+="<br>"+enemyMove[i].execute(enemy[i],[player]);
			}
			for (i=0;i<enemy.length;i++){
				for (j=0;j<enemy[i].statusEffect.length;j++){
					message+="<br>"+enemy[i].statusEffect[j].execute();
					enemy[i].statusEffect[j].durationRemaining--;
					if (enemy[i].statusEffect[j].durationRemaining<=0){
						enemy[i].statusEffect.splice(j,1);
					}
				}
			}
			if (player.health<=0){
				alert("You lost...");
			}
			var victory=true;
			for (i=0;i<enemy.length;i++){
				if (enemy[i].health>=0){
					victory=false;
				}
			}
			if (victory==true){
				alert("You win!");
			}
			turnCount++;
			battleDisplay(enemy,message);
		}
		function incrementSeed(skip){
			while (skip>=0){
				increment++;
				var i=increment-1;
				while (i!=1){
					if (checkDivisibility(increment,i)){
						increment++;
						i=increment;
					}
					i--;
				}
				skip--;
			}
			return increment;
		}
		function checkDivisibility(first, second){
			var greatest=first;
			var least=second;
			if (second>first){
				greatest=second;
				least=first;
			}
			if (Math.floor(greatest/least)==greatest/least){
				return true;
			}
			return false;
		}
	</script>
	<style>
	div.left{
		float:left;
		text-align:center;
	}
	</style>
</html>
