<!DOCTYPE html>
<html>
	<meta charset="UTF-8">
	<title>Project Parodikos</title>
	<pre id="mainText">Yo. Click <input type="button" value="here" onclick="mainMenu();"> to begin.</pre>
	<pre id="extraTextA" disabled></pre>
	<script>
		var slash=new move("Slash",function(user, target){
			target.health-=getStandardDamageCurve(user,target,1,0,0);
		},function(user, target, userOldHealth, targetOldHealth){
			var message="";
			if (user==player){
				message+="You";
			}
			else{
				if (user.generic==true){
					message+="The";
				}
				message+=" "+user.nameSing;
			}
			message+=" slashed";
			if (target==player){
				message+=" you";
			}
			else{
				if (target.generic==true){
					message+=" the";
				}
				message+=" "+target.nameSing;
			}
			message+=" for "+(targetOldHealth-target.health)+" damage!";
			return message;
		});
		betaSword=new weaponPhysical("Beta Sword",slash,slash,slash);
		betaArmor=new armor("Beta Armor",0);
		player=new playerCharacter();
		player.weaponEquipped=betaSword;
		beta=new enemy("Beta","Betae",true,20,1,1,1,betaArmor);
		function playerCharacter(){
			this.nameSing="";
			this.generic=false;
			this.maxHealth=100;
			this.health=this.maxHealth;
			this.attack=4;
			this.defense=4;
			this.magic=4;
			this.weaponEquipped=0;
			this.armorEquipped=0;
		}
		function enemy(nameSingParam, namePlParam, genericParam, maxHealthParam, attackParam, defenseParam, magicParam, armorEquippedParam){
			this.nameSing=nameSingParam;
			this.namePl=namePlParam;
			this.generic=genericParam;
			this.maxHealth=maxHealthParam;
			this.health=this.maxHealth;
			this.attac=attackParam;
			this.defense=defenseParam;
			this.magic=magicParam;
			this.armorEquipped=armorEquippedParam;
		}
		function weaponPhysical(nameSingParam, primaryAttackParam, secondaryAttackParam, tertiaryAttackParam){
			this.nameSing=nameSingParam;
			this.primaryAttack=primaryAttackParam;
			this.secondaryAttack=secondaryAttackParam;
			this.tertiaryAttack=tertiaryAttackParam;
		}
		function armor(nameSingParam, slashDefenseParam){
			this.nameSing=nameSingParam;
			this.slashDefense=slashDefenseParam;
		}
		function move(nameParam, executeParam, battleMessageParam){
			this.name=nameParam;
			this.execute=executeParam;
			this.battleMessage=battleMessageParam;
		}
		function getStandardDamageCurve(user, target, slash, puncture, impact){
			var difference=(user.attack+slash)-(target.defense+target.armorEquipped.slashDefense);
			var baseDamage=Math.ceil(slash/4);
			var extraDamage=(1/8)*(2*Math.pow(difference,2)+Math.pow(-1,difference)+7);
			if (extraDamage>0){
				return baseDamage+Math.ceil(extraDamage);
			}
			else{
				return baseDamage;
			}
		}
		function mainMenu(){
			document.getElementById("mainText").innerHTML="<input type='button' value='New Game' onclick='newGame();'><br><br><input type='button' value='Load Game' onclick='loadGame();'>";
		}
		function newGame(){
			setName();
		}
		function setName(){
			document.getElementById("mainText").innerHTML="What is your name?<br><input id='nameInput' type='text' autofocus><input type='button' value='Submit' onclick='difficulty();'>";
		}
		function difficulty(){
			player.nameSing=document.getElementById("nameInput").value;
			if (player.nameSing==""){
				return;
			}
			document.getElementById("mainText").innerHTML="What difficulty do you want to play on?<br>(This cannot be changed once set.)<br><br><input type='button' value='Normal' onclick='battle(beta)'>";
		}
		function battle(enemy){
			enemy.health=enemy.maxHealth;
			turnCount=0;
			battleDisplay(enemy,"");
		}
		function battleDisplay(enemy, battleText){
			var isAttackMenuExpanded=false;
			document.getElementById("mainText").innerHTML=enemy.nameSing+" HP: "+enemy.health+"<br><br><br>"+player.nameSing+" HP: "+player.health+"<br><br>"+battleText;
			document.getElementById("extraTextA").innerHTML="<input id='attackInput' type='button' value='Attack'>";
			document.getElementById("attackInput").onclick=function expandAttackMenu(){
				if (isAttackMenuExpanded==false){
					document.getElementById("extraTextA").innerHTML+="<br>|--<input id='primaryAttackInput' type='button' value="+player.weaponEquipped.primaryAttack.name+"><br>|--<input id='secondaryAttackInput' type='button' value="+player.weaponEquipped.secondaryAttack.name+"><br>|--<input id='tertiaryAttackInput' type='button' value="+player.weaponEquipped.tertiaryAttack.name+">";
					document.getElementById("attackInput").onclick=function(){expandAttackMenu();};
					document.getElementById("primaryAttackInput").onclick=function(){battleTurn(player,enemy,player.weaponEquipped.primaryAttack);};
					document.getElementById("secondaryAttackInput").onclick=function(){battleTurn(player,enemy,player.weaponEquipped.secondaryAttack);};
					document.getElementById("tertiaryAttackInput").onclick=function(){battleTurn(player,enemy,player.weaponEquipped.tertiaryAttack);};
					isAttackMenuExpanded=true;
				}
				else{
					document.getElementById("extraTextA").innerHTML="<input id='attackInput' type='button' value='Attack'>";
					document.getElementById("attackInput").onclick=function(){expandAttackMenu();};
					isAttackMenuExpanded=false;
				}
			};
		}
		function battleTurn(player, enemy, playerMove){
			var oldPlayerHealth=player.health;
			var oldEnemyHealth=enemy.health;
			playerMove.execute(player,enemy);
			var enemyMove=slash;
			enemyMove.execute(enemy,player);
			if (player.health<=0){
				alert("You lost...");
			}
			if (enemy.health<=0){
				alert("You win!");
			}
			battleDisplay(enemy,playerMove.battleMessage(player,enemy,oldPlayerHealth,oldEnemyHealth)+"<br>"+enemyMove.battleMessage(enemy,player,oldEnemyHealth,oldPlayerHealth));
		}
	</script>
</html>
